/*
 * Yahoo!広告 ディスプレイ広告 API リファレンス / Yahoo! JAPAN Ads Display Ads API Reference
 * <div lang=\"ja\">Yahoo!広告 ディスプレイ広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Display Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/design/v11/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-display-api-documents/blob/master/bestpractice/en\">Best Practice</a></div> 
 *
 * The version of the OpenAPI document: v11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package jp.co.yahoo.adsdisplayapi.v11.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import jp.co.yahoo.adsdisplayapi.v11.model.ConversionTrackerServiceWebConversionSnippetType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * &lt;div lang&#x3D;\&quot;ja\&quot;&gt; ConversionTrackerServiceWebConversionSnippetオブジェクトは、ウェブコンバージョントラッカーのトラッキングスクリプト情報を表します。&lt;br&gt; このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 &lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt; ConversionTrackerServiceWebConversionSnippet object displays the tracking script information of Web Conversion Tracker.&lt;br&gt; Although this field will be returned in the response, it will be ignored on input. &lt;/div&gt; 
 */
@JsonPropertyOrder({
  ConversionTrackerServiceWebConversionSnippet.JSON_PROPERTY_ADVANCED_TAG,
  ConversionTrackerServiceWebConversionSnippet.JSON_PROPERTY_WEB_CONVERSION_SNIPPET_TYPE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ConversionTrackerServiceWebConversionSnippet {
  public static final String JSON_PROPERTY_ADVANCED_TAG = "advancedTag";
  private String advancedTag;

  public static final String JSON_PROPERTY_WEB_CONVERSION_SNIPPET_TYPE = "webConversionSnippetType";
  private ConversionTrackerServiceWebConversionSnippetType webConversionSnippetType;

  public ConversionTrackerServiceWebConversionSnippet() {
  }

  public ConversionTrackerServiceWebConversionSnippet advancedTag(String advancedTag) {
    
    this.advancedTag = advancedTag;
    return this;
  }

   /**
   * &lt;div lang&#x3D;\&quot;ja\&quot;&gt; リニューアル版のコンバージョンタグは、従来のタグよりもブラウザーなどの環境の影響を受けづらい新しいフォーマットです。&lt;br&gt; 詳細は、「&lt;a href&#x3D;\&quot;https://ads-help.yahoo.co.jp/yahooads/display/articledetail?lan&#x3D;ja&amp;aid&#x3D;59417\&quot;&gt;コンバージョン測定とは&lt;/a&gt;」を参照してください。&lt;br&gt; このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 &lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt; The new format of conversion tag avoids the impacts such as changes made to the browser. &lt;br&gt; More details are described on &lt;a https://ads-help.yahoo.co.jp/yahooads/display/articledetail?lan&#x3D;en&amp;aid&#x3D;33889\&quot;&gt;Conversion Analytics&lt;/a&gt;.&lt;br&gt; Although this field will be returned in the response, it will be ignored on input. &lt;/div&gt; 
   * @return advancedTag
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADVANCED_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAdvancedTag() {
    return advancedTag;
  }


  @JsonProperty(JSON_PROPERTY_ADVANCED_TAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdvancedTag(String advancedTag) {
    this.advancedTag = advancedTag;
  }


  public ConversionTrackerServiceWebConversionSnippet webConversionSnippetType(ConversionTrackerServiceWebConversionSnippetType webConversionSnippetType) {
    
    this.webConversionSnippetType = webConversionSnippetType;
    return this;
  }

   /**
   * Get webConversionSnippetType
   * @return webConversionSnippetType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEB_CONVERSION_SNIPPET_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ConversionTrackerServiceWebConversionSnippetType getWebConversionSnippetType() {
    return webConversionSnippetType;
  }


  @JsonProperty(JSON_PROPERTY_WEB_CONVERSION_SNIPPET_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebConversionSnippetType(ConversionTrackerServiceWebConversionSnippetType webConversionSnippetType) {
    this.webConversionSnippetType = webConversionSnippetType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversionTrackerServiceWebConversionSnippet conversionTrackerServiceWebConversionSnippet = (ConversionTrackerServiceWebConversionSnippet) o;
    return Objects.equals(this.advancedTag, conversionTrackerServiceWebConversionSnippet.advancedTag) &&
        Objects.equals(this.webConversionSnippetType, conversionTrackerServiceWebConversionSnippet.webConversionSnippetType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advancedTag, webConversionSnippetType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversionTrackerServiceWebConversionSnippet {\n");
    sb.append("    advancedTag: ").append(toIndentedString(advancedTag)).append("\n");
    sb.append("    webConversionSnippetType: ").append(toIndentedString(webConversionSnippetType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

